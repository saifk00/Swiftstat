syntax = "proto3";

package org.swiftstat;

enum PGMType {
  BAYESIAN = 0;
  MARKOV = 1;
}

message EdgeProto {
  string from_node = 1;
  string to_node = 2;
}
message FactorProto {
  repeated string nodes = 1;
  repeated double values = 2;
}
message Condition {
  string node = 1;
  optional double value = 2;
}
message MarginalQuery { repeated RelationQuery unobserved = 1; }
message ExpectationQuery { QueryExpression node_function = 1; }
message MAPQuery { QueryExpression node_function = 1; }
message QueryProto {
  oneof inner_query {
    MarginalQuery marginal_query = 1;
    ExpectationQuery expectation_query = 2;
    MAPQuery map_query = 3;
  }

  repeated Condition conditions = 4;
  double epsilon = 5;
  double delta = 6;
  string name = 7;
}
message PGMProto {
  PGMType type = 1;
  string network_name = 7;
  repeated UserNode nodes = 2;
  repeated EdgeProto edges = 3;
  repeated FactorProto factors = 4;
  // TODO(skhattak) remove this?
  repeated string evidence_variables = 5;
  repeated QueryProto queries = 6;
}

message CPDProto {
  repeated double values = 1;
  repeated string parent_order = 2;
  repeated double distribution = 3;
}

message UserNode {
    string name = 1;
    CPDProto cpd = 2;
}

// Relation queries follow the grammar below
// Note that this allows some malformed queries such as const > const
// but we assume this is handled at a higher level for simplicity in the
// grammar.
//  S |-	E > E
//          E < E
//          E >= E
//          E <= E
//          E = E

// E |- E + E
// 	    E - E
// 	    E * E
// 	    E / E
//      E ^ E
//      (E)
// 	    node
//      const

// const |- [0-9]+.?[0-9]*
// node |- [A-Za-z]+[A-Za-z0-9]*

message QueryExpression {
  enum Type {
    PLUS = 0;
    MINUS = 1;
    MULTIPLY = 2;
    DIVIDE = 3;
    POW = 4;
    CONST = 5;
    NODE = 6;
  }

  Type type = 1;
  QueryExpression lexpr = 2;
  QueryExpression rexpr = 3;
  string node = 5;
  double value = 6;
}
message RelationQuery {
  enum Type {
    EQUAL = 0;
    LESS_THAN = 1;
    LESS_THAN_OR_EQUAL = 2;
    GREATER_THAN = 3;
    GREATER_THAN_OR_EQUAL = 4;
  }

  Type relation = 1;
  QueryExpression lexpr = 2;
  QueryExpression rexpr = 3;
}